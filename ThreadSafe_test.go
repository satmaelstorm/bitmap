package bitmap

import (
	"github.com/stretchr/testify/suite"
	"testing"
)

type ThreadSafeTestSuite struct {
	suite.Suite
}

func TestThreadSafe(t *testing.T) {
	suite.Run(t, new(ThreadSafeTestSuite))
}

func (s *ThreadSafeTestSuite) TestAtomic64() {
	bm, err := NewAtomic64([]int{0, 1, 3, 7, 8, 12, 15, 16, 22, 24, 31, 32, 40, 50, 63, 64})
	s.Nil(bm)
	s.NotNil(err)
	bm, err = NewAtomic64([]int{0, 1, 3, 7, 8, 12, 15, 16, 22, 24, 31, 32, 40, 50, 63})
	s.Nil(err)
	s.NotNil(bm)
	idx := NewThreadSafe(bm)
	s.True(idx.FindOne(1))
	s.True(idx.FindOne(0))
	s.True(idx.FindOne(63))
	s.True(idx.FindOne(3))
	s.True(idx.FindAll([]int{3, 7, 8, 15, 16, 31, 32, 40, 50, 63}))
	s.True(idx.FindLeastOne([]int{2, 4, 50}))
	s.False(idx.FindOne(4))
	s.False(idx.FindOne(64))
	s.False(idx.FindAll([]int{40, 50, 63, 64}))
	s.False(idx.FindLeastOne([]int{41, 51, 62, 64}))
	err = idx.Add(64)
	s.NotNil(err)
	err = idx.Add(4)
	s.Nil(err)
	s.True(idx.FindOne(4))
	idx.Delete(3)
	s.False(idx.FindOne(3))
	idx.Delete(64)
}

func (s *ThreadSafeTestSuite) TestAtomic32() {
	bm, err := NewAtomic32([]int{0, 1, 3, 7, 8, 12, 15, 16, 22, 24, 31, 32})
	s.Nil(bm)
	s.NotNil(err)
	bm, err = NewAtomic32([]int{0, 1, 3, 7, 8, 12, 15, 16, 22, 24, 31})
	s.Nil(err)
	s.NotNil(bm)
	idx := NewThreadSafe(bm)
	s.True(idx.FindOne(1))
	s.True(idx.FindOne(0))
	s.True(idx.FindOne(31))
	s.True(idx.FindOne(3))
	s.True(idx.FindAll([]int{3, 7, 8, 15, 16, 31}))
	s.True(idx.FindLeastOne([]int{2, 31, 50}))
	s.False(idx.FindOne(4))
	s.False(idx.FindOne(32))
	s.False(idx.FindAll([]int{1, 3, 8, 30}))
	s.False(idx.FindLeastOne([]int{25, 30, 20, 32}))
	err = idx.Add(32)
	s.NotNil(err)
	err = idx.Add(4)
	s.Nil(err)
	s.True(idx.FindOne(4))
	idx.Delete(3)
	s.False(idx.FindOne(3))
	idx.Delete(32)
}

func (s *ThreadSafeTestSuite) TestAtomic16() {
	bm, err := NewAtomic16([]int{0, 1, 3, 7, 8, 12, 15, 16})
	s.Nil(bm)
	s.NotNil(err)
	bm, err = NewAtomic16([]int{0, 1, 3, 7, 8, 12, 15})
	s.Nil(err)
	s.NotNil(bm)
	idx := NewThreadSafe(bm)
	s.True(idx.FindOne(1))
	s.True(idx.FindOne(0))
	s.True(idx.FindOne(15))
	s.True(idx.FindOne(3))
	s.True(idx.FindAll([]int{3, 7, 8, 15}))
	s.True(idx.FindLeastOne([]int{2, 15, 50}))
	s.False(idx.FindOne(4))
	s.False(idx.FindOne(16))
	s.False(idx.FindAll([]int{1, 3, 8, 16}))
	s.False(idx.FindLeastOne([]int{2, 6, 14, 16}))
	err = idx.Add(16)
	s.NotNil(err)
	err = idx.Add(4)
	s.Nil(err)
	s.True(idx.FindOne(4))
	idx.Delete(3)
	s.False(idx.FindOne(3))
	idx.Delete(16)
}

func (s *ThreadSafeTestSuite) TestAtomic8() {
	bm, err := NewAtomic8([]int{0, 1, 3, 7, 8})
	s.Nil(bm)
	s.NotNil(err)
	bm, err = NewAtomic8([]int{0, 1, 3, 7})
	s.Nil(err)
	s.NotNil(bm)
	idx := NewThreadSafe(bm)
	s.True(idx.FindOne(1))
	s.True(idx.FindOne(0))
	s.True(idx.FindOne(7))
	s.True(idx.FindOne(3))
	s.True(idx.FindAll([]int{1, 7}))
	s.True(idx.FindLeastOne([]int{2, 1}))
	s.False(idx.FindOne(4))
	s.False(idx.FindOne(8))
	s.False(idx.FindAll([]int{0, 1, 2}))
	s.False(idx.FindLeastOne([]int{2, 4}))
	err = idx.Add(8)
	s.NotNil(err)
	err = idx.Add(4)
	s.Nil(err)
	s.True(idx.FindOne(4))
	idx.Delete(3)
	s.False(idx.FindOne(3))
	idx.Delete(8)
}
